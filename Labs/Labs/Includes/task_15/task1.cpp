# include <iostream>
# include <time.h>
using namespace std;

int n;

class int_mass
{
public:
    int_mass (); // формирование массива вводом чмсел с клавиатуры
    void output_mass (int n) const; // метод по выводу сформульрованого массива на экран
    void outut_negativ (int n) const; // метод по выводу сначала всех отрицательных элементов, потом всех остальных;
    void sum_mass (int n); // вычисление значения суммы элементов в тех строках, которые содержат хотя бы один отрицательный эл
    void saddle (int n, int i, bool &flag); // нахождение седловых точек
    int_mass (int max, int min); // формирование массива при помощи ГСЧ
private:
    int mass[10][10]; // заданый массив
};

int_mass::int_mass()
{
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            cout << " Введите A " << i+1 << ',' << j+1 << ": ";
            cin >> mass[i][j];
        }
        cout << endl;
    }
}

int_mass::int_mass (int max, int min) // конструктор создающий массив при помощи ГСЧ в заданом деопазоне
{
    srand (( unsigned) time(NULL)); // определение ГСЧ
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            mass[i][j]=rand()%(max-min+1)+min; // формирование числа
        }
    }
}

void int_mass::output_mass (int n) const // вывод сформульрованого массива на экран
{
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            cout << mass[i][j] << "    ";
        }
        cout << endl;
    }
    cout << endl;
}

void int_mass::outut_negativ (int n) const // метод по выводу сначала всех отрицательных элементов, потом всех остальных;
{
    cout << " Ввывод массива где сначала идут отрицательные, а затем положительные элименты: " << endl;
    cout << "________________________" << endl;
    for (int i=0; i<n; i++)
    {
        // вывод отрицательных чисел
        for (int j=0; j<n; j++)
        {
            if (mass[i][j]<0)//
            {
                cout << mass[i][j] << "  ||  "; // вывод отрицательных чисел в строке
            }
        }

        //вывод положительных чисел
        for (int j=0; j<n; j++)
        {
            if (mass[i][j]>=0)//
            {
                cout << mass[i][j] << "  ||  "; // вывод положительных чисел в строке
            }
        }
        cout << endl;
    }
    cout << "________________________" << endl;
    cout << endl;
}

void int_mass::sum_mass (int n) //вычисление значения суммы элементов в тех строках, которые содержат хотя бы один отрицательный эл
{
    cout << "Вычисление суммы в тех строках в которых есть хотя бы один отрицательный элемент " << endl;
    cout << "№ стр|| сумма" << endl;
    for (int i=0; i<n; i++)
    {
        int summ=0;
        for (int j=0; j<n; j++)
        {
            if (mass[i][j]<0)
            {
                for (int k=0; k<n; k++)
                {
                    summ+=mass[i][k];
                }
                break;
            }
        }
        cout << "  " << i+1 << "  || " << summ << endl;
    }
}

void int_mass::saddle (int n, int i, bool &flag) // вычисление седловых точек
{
    int index=0; // переменная хранящая номер столбца максимального элемента

    // нахождение максимальной точки в строке

    int min=mass[i][0]; // переменная хоанящая значение max элемента в i строке
    for (int j=0; j<n; j++)
    {
        if (mass[i][j]<min) // проверка элемента строки на максимум
        {
            index=j; // сохранения номера столбца максимального элемента
            min=mass[i][j]; // присвоение значения максимального элемента в строке
        }
    }
    for (int j=0; j<n; j++)
    {
        if (min==mass[i][j])
        {
            int max=mass[0][index]; // переменная хранящая минимальное значение в j строке

            for (int k=0; k<n; k++)
            {
                if (mass[k][index]>max) // проверка элемента строки на минимум
                {
                    max=mass[k][index]; // присвоение значение минимального  элемента в столбце
                }
            }

            if (max==min) // если элеенты максимума и минимума
            {
                cout << " Седловая точка с координатами [" << i+1<< ", " << j+1 << "]" << endl;
                flag=true;
            }
        }
    }
}

int main ()
{
    cout << " Введите размер массива: ";
    cin >> n;

    bool flag;

    // 1 задание ввод данных с клавиатуры
    {
         
        int_mass M1;
        cout << " Сформированый массив: \n";

        M1.output_mass (n);
        M1.outut_negativ (n);
        M1.sum_mass (n); // вычисление значения суммы элементов в тех строках, которые содержат хотя бы один отрицательный эл
        flag=false;
        for (int k=0; k<n; k++)
        {
            int i=k;
            M1.saddle (n,i, flag); // нахождение седловых точек
        }
        if (flag==false)
        {
            cout << " Седловых точек нет !!!";
        }
    }
   
    // 2 задание для ГСЧ
   
    cout << endl;

    cout << " Формирование массива при помощи ГСЧ " << endl;
    {
        int max; // максимальное число в массиве сформированого при помощи ГСЧ
        int min; // минимальное число в массиве сформированого при помощи ГСЧ 
        cout << " Введите min значение: "; // ввод минимального числа в массиве
        cin >> min;

        cout << " Введите max значение: "; // ввод максимального числа в массиве
        cin >> max;
        cout << endl;

        int_mass M2(max, min);

        cout << " Сформированый при помощи ГСЧ массив: \n" << endl;

        M2.output_mass (n); // метод по выводу сформульрованого при помощи ГСЧ массива на экран
        M2.outut_negativ (n); // метод по выводу сначала всех отрицательных элементов, потом всех остальных
        M2.sum_mass (n); // вычисление значения суммы элементов в тех строках, которые содержат хотя бы один отрицательный эл

        flag=false;

        for (int k=0; k<n; k++)
        {
            int i=k;
            M2.saddle (n,i, flag); // нахождение седловых точек
        }

        if (flag==false)
        {
            cout << " Седловых точек нет !!!" << endl;
        }
    }

    system ("pause");
    return 0;
}
